name: SVDB CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Run unit tests for all components
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      # Install RocksDB dependencies
      - name: Install RocksDB dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y librocksdb-dev libclang-dev libssl-dev

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx aiohttp
          pip install -r api/requirements.txt
          pip install -e integrations/
      
      # Build Rust storage engine
      - name: Build storage engine
        working-directory: storage_engine
        run: |
          pip install maturin
          cd src && cargo build --release
          cd ../python && maturin build --release
          pip install target/wheels/*.whl
      
      # Run Rust unit tests
      - name: Run Rust tests
        working-directory: storage_engine/src
        run: cargo test
      
      # Run Python API tests
      - name: Run API tests
        run: pytest api/tests/
      
      # Run Blockchain Bridge tests
      - name: Run Bridge tests
        run: pytest blockchain_bridge/tests/
      
      # Run Integration tests
      - name: Run Integration tests
        run: pytest tests/ -xvs

  # Build and push Docker images
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v3
      
      # Log in to container registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Extract metadata for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging environment (on develop branch)
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      
      # Deploy to staging using docker-compose
      - name: Deploy to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/svdb-staging
            git pull
            docker-compose pull
            docker-compose up -d
            docker system prune -af

  # Deploy to production environment (on main branch)
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      # Deploy to production using docker-compose
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/svdb-production
            git pull
            docker-compose pull
            docker-compose up -d
            docker system prune -af 